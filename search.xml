<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[十年]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E5%8D%81%E5%B9%B4%2F</url>
    <content type="text"><![CDATA[天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆 ——钱钟书。 ​ 从初中入学到大学毕业，从归乡的校车到返校的大巴。又是十年国庆，弹指一挥间，见证了祖国的空前强大，也亲历了激荡的互联网十年，还有十年的游戏生涯，不管情愿与否，十年的历史车轮已经驶过，生活方式在不断的被改变，每一个决定都定格在了历史中，但是这些事情，与我这种被生活推着改变的人，实在没有什么关联，最重要的是与你相识的第十个年头，我们经历了那么多事情，所幸还记得彼此最初的模样。 人生是一场永不止息的旅行，我们被人海裹胁着向前，不能回头，走过的路，说过的话，做过的事，无论对错，也再无更改的可能。回忆对我来说，是一次对抗时间和人海的逆旅，试着让时间倒转回到从前，我又会想回到哪一年呢？倘若没有经历这个夏天，我会毫不犹豫的选择高三毕业那年的暑假，不会是16年夏天的的OW，也不会是18年夏天的LGD，对我来说高考毕业那年暑假才是我的整个夏天。曾经那细致而微的痛苦；那些特别想做却被阻拦过的梦；特别想在一起却终究无力同行的人；那些我们曾经明白了生离死别意义的艰难岁月；让我们一夜成长的悲伤过去；明亮的或者黑暗的，其实我都还记得，可能那些回忆已在脑中不断的重构美化，但那些刻骨铭心的事情，每念及此，心中就会荡起无数涟漪。 人又该怎样回忆自己的青春呢，无非是那些人，那些事罢。我自然也不能免俗，除了那些傻逼的过去之外，忘不掉的是初中嬉闹的日常，高三回校的那个夜晚，毕业餐桌的泪水，目送我去复读的祝福，还有橘子洲的诀别，太平街的决绝，以为最后岳麓山的释然，还有很多很多事情，虽然已经模糊不清，但就像吃过的饭食,現在已經記不起吃過什麼了 。但可以肯定的是 ,它們中的一部分已經長成了我的骨頭和肉 ，那些记忆也是如此。 进入大学后，尝试着以新的身份去面对新的生活，早起吃点早餐; 跑跑步; 专业课认真听; 公共课看看刷刷论坛; 中午小睡一会儿; 下午参加个社团活动或打打游戏;或去自习室安静地看看书，每当难过的时候，或是事情不顺心的时候，我只要打一场英雄联盟，所有的不顺心都会烟消云散，just play a lol game……这些都是刚进入大学时的常态，怀揣着梦想和热情创办了电竞社，也认识了好几个知交朋友，本想就这么平淡的度过大学这几年，然后在临近毕业的日子里，鸿鹄志高却难遂，迷茫地过着，昏昏噩噩地耗，最终不是妥协泯然众人，就是找不到出口被生活围困。 但是你的出现让一切又变的不一样了，自岳麓山一别，听闻你要考研，便再也没有打扰过你，那时能做的唯有祝福而已，本以为日后再无交集，没想到却仍是你们给了我奋斗下去的动力，我很庆幸在人生的关键时刻，有你们在前面披襟斩棘，为我指引方向，很感谢你们在上岸之后仍然能像高中那样推我前进。而后了解你的大学经过就是，想到你受过伤，我会心疼；想到你如释重负的解脱与辛酸过往的偿还，我会开心；想到你经历过的快乐，我也会遗憾；可正是因为这些过去，我们摸不到听不到也看不到的一切，只转化成了一种形态，凑成了一个完整的个体。我很高兴，高兴在于，我又拥有了一个完整而又美好的夏天，而且被赋予了全新的含义，也加入了不少新鲜的事物，使我不再过于缅怀过去，似乎也找到了自己应追寻的方向，不再否认过往的一切，因为一切都都光亮了起来。 爱，自由和时间，曾一度被我挥霍，而今成为了我前进的动力。献给赋予我们生命的那壮美奇妙，让人产生无限遐想的世界；同样，也献给你,生日快乐呀。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>玲</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2-0入门-全局API]]></title>
    <url>%2Funcategorized%2FVue2-0%E5%85%A5%E9%97%A8-%E5%85%A8%E5%B1%80API%2F</url>
    <content type="text"><![CDATA[第一节：Vue.directive 自定义指令什么是全局API全局API并不在构造器里，二十先声明全局变量或者直接在Vue上定义一些新功能，Vue内置了一些全局API。简单而言，就是在构造器外部用Vue提供给我们的API函数来定义新的功能。 Vue.directive自定义指令自定义一些属于自己的指令，比如定义一个v-neo的指令，作用就时让文字变成绿色。 在定义之前我们写一个小功能，在页面上有一个数字为10，数字的下面有一个按钮，我们每点击一次按钮后数字加1. 写好了这个功能，我们现在就自己定义一个全局的指令。我们这里使用Vue.directive(); 12 自定义指令中传递的三个参数 el：指令所绑定的元素，可以用来直接操作DOM binding：一个对象，包含指令的很多信息。 vnode：Vue编译生成的虚拟节点]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言入门]]></title>
    <url>%2Funcategorized%2FC%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[C语言是古老而长青的编程语言，它具备了现代程序设计的基础要求，它的语法是很多其他编程语言的基础，在系统程序、嵌入式系统等领域依然是无可替代的编程语言，在各类编程语言排行榜上常年占据前两名的位置。 本课程是后续的操作系统、编译原理、体系结构等课程的基石。 第一节：介绍：计算机、程序和C语言计算机和编程语言计算机是语言 程序是⽤特殊的编程语⾔写出来表达如何解决问题的 不是⽤编程语⾔来和计算机交谈，⽽是描述要求它如何做事情的过程或⽅法 算法 我们要让计算机做计算,就需要像这样找出计算的步骤,然后⽤编程语⾔写出来 计算机做的所有的事情都叫做计算 程序的执⾏ 解释：借助⼀个程序，那个程序能试图理解你的程序，然后按照你的要求执⾏ 编译：借助⼀个程序，就像⼀个翻译，把你的程序翻译成计算机真正能懂的语⾔——机器语⾔——写的程序，然后，这个机器语⾔写的程序就能直接执⾏了 解释语言与编译语言 语言本无编译/解释之分 常用的执行方式而已 解释型语言有特殊的计算能力 编译型语言有确定的运算性能 C语言C语言用在哪里 操作系统 嵌入式系统 驱动程序 底层驱动 • 图形引擎、图像处理、声⾳效果 C是一种工业语言 开发效率&gt;&gt;学习过程 开发效率&gt;&gt;开发乐趣 日常应用很少直接用C语言编写 学习C的过程主要是写练习代码 • ⽽⾮真实软件 编译—&gt;运⾏• C需要被编译才能运⾏，所以你需要 编辑器 编译器 • 或者，IDE（集成开发环境） 第一个程序1234567#include&lt;stdio.h&gt;int main()&#123; printf("Hello World!\n"); return 0;&#125; 第二节：计算：变量和表达式变量变量 变量是一个保存数据的地方，当我们需要在程序里保存数据时，就需要一个变量来保存它 定义 一般形式就是：&lt;类型名称&gt; &lt;变量名称&gt;; 名字： 变量需要一个名字，变量的名字是一种“标识符”，意思是它用来识别这个和那个的不同的名字。 标识符有标识符的构造规则。基本的原则是：标识符只能由字母、数字和下划线组成，数字不可以出现在第一个位置上，C语言的关键字（有的地方叫他们保留字）不可以用作标识符。 C语言的保留字auto,break,case,char,const,continue,default,do,double,else,enum,extern, float,for,goto,if,int,long,register,return,short,signed,sizeof,static,struct,switch, typedef,union,unsigned,void,volatile,while,inline,restrict. 赋值 和数学不同，a=b在数学中表示关系，即a和b的值一样；而在程序设计中，a=b表示要求计算机做一个动作:将b的值赋给a。关系是静态的，而动作是动态的。 初始化 当赋值发生在定义变量的时候，就是变量的初始化 变量初始化 &lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;; 组合变量定义的时候，也可以在这个定义中单独给单个变量赋初值。 读整数 scanf(“%d”,&amp;price); 要求scanf这个函数读入下一个整数，读到的结果赋值给变量price 小心price前面的&amp; 表达式 “=”是赋值运算符，有运算符的式子就叫做表达式。 变量类型 C是一种有类型的语言，所有的变量在使用之前必须定义或生命，所有的变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，变量中只能存放指定类型的数据，运行过程中不能改变变量的类型 常量 固定不变的数是常数。直接写在程序里，我们称作直接量（literal) 。 更好的方式是定义一个常量： const int AMOUNT = 100; const const是一个修饰符，加在int的前面，用来给这个变量加上一个const的属性。这个const的属性表示这个变量的值一旦初始化，就不能再修改了。 浮点数 带小数点的述职。浮点这个词的本意就是值小数点是浮动的，是计算机内部表达非整数的一种方式。 double inch是定义为int类型的变量，如果把int换成double，我们就可以把它改为double类型的浮点数变量了。 double的意思是”双”,他本来是”双精度浮点数”的第一个单词，人们用来表示浮点数类型。除了double,还有float标示单精度浮点数。 表达式定义 一个表达式是一系列运算符和算子的组合，用来计算一个值。 运算符（operator）是指进行运算的动作，比如”+”,”-“,”*”,”/“。 算子（operand）是指参与运算的值，可以是常数，变量，还可以是一个方法的返回值 四则预算 四则运算 C符号 意义 + + 加 - - 减 x * 乘 ÷ / 除 % 取余 () () 括号 %表示取两个数相除以后的余数 运算符优先级 优先级 运算符 运算 结合关系 举例 1 + 单目不变 自右向左 a*+b 1 - 单目取负 自右向左 a*-b 2 * 乘 自左向右 a*b 2 / 除 自左向右 a/b 2 % 取余 自左向右 a%b 3 + 加 自左向右 a+b 3 - 减 自左向右 a-b 4 = 赋值 自右向左 a=b 递增递减运算符 “++”和”- -“是两个很特殊的运算符，他们是单目运算符，这个算子还必须是变量，作用就是给变量+1或-1。 ++和- -可以放在变量的前⾯，叫做前缀形式，也可以放在变量的后⾯，叫做后缀形式。 a++的值是a加1以前的值，⽽++a的值是加了1以后的值，⽆论哪个，a⾃⼰的值都加了1了。 前缀后缀 表达式 运算 表达式的值 count++ 给count加1 count原来的值 ++count 给count加1 count+1以后的值 count- - 给count减1 count原来的值 - -count 给count减1 count-1以后的值 第三节：判断：分支结构判断条件 计算两个值之间的关系，叫做关系运算 运算符 意义 == 相等 != 不相等 &gt; 大于 &gt;= 大于或等于 &lt; 小于 &lt;= 小于或等于 优先级 所有的关系运算符的优先级比算术运算低，但是比赋值运算的高 判断是否相等的==和!=的优先级比其他的低，而连续的关系运算时从左到右进行的 注释 注释（comment)插入在程序代码中，用来向读者提供解释信息。他们对于程序的功能没有任何影响，但是往往能使得程序更容易被人类读者理解。 延续数行的注释，要用多行注释的格式来写。多行注释由一对字符序列”/*”开始，而以”*/“结束。 if语句 if语句这一行结束的时候并没有表示语句结束的”;”，而后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的”;”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这套赋值语句，决定它是否要被执行。 分支嵌套的判断 当if的条件满足或者不满足的时候要执行的语句也可以是一条IF或if-else语句，这就是嵌套的if语句 else的匹配 else总是和最近的那个if匹配 switch-case 控制表达式只能是整数型的结果 常量可以使常数，也可以是常数计算的表达式 根据表达式的结果，寻找匹配的case,并执行case后面的语句，一直到break为止 如果所有的case都不匹配，那么就执行default后面的语句；如果没有default，那么就什么都不做 break switch语句可以看作是一种基于计算的跳转，计算控制表达式的值后，程序会跳转到相匹配的case（分支标号）处。 分支标号只是说明switch内部位置的路标，在执行完分支中的最后一条语句后，如果后面没有break，就会顺序执行到下面的case里去，直到遇到一个break,或者switch结束为止。 第四节：循环循环while循环 如果我们把while翻译作”当”，那么一个while循环的意思就是：当条件满足时，不断地重复循环体内的语句。 循环执行之前判断是否继续循环，所以有可能循环一次也没有被执行。 条件成立时循环继续的条件。 do-while循环 在进入循环的时候不做检查，而是在执行完一轮循环体的代码之后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环 两种循环 do-while循环和while循环很像，区别是在循环体执行结束的时候才来判断条件。也就是说，无论如何，循环都会执行至少一遍，然后再来判断条件。相同的是，条件满足时执行循环，条件不满足时结束循环。 for循环 for循环像一个计数循环；设定一个计数器，初始化它，然后再计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步进行调整。 示例： for（初始动作;条件;每轮的动作）{ } for中的每一个表达式都只可以省略的 for(;条件;)==while(条件) 循环控制break vs continue break：跳出循环 continue：跳过循环这一轮剩下的语句进入下一轮 第五节：数据类型和处理数据类型C是有类型的语言 C语言的变量必须在使用前定义并且确定类型 C以后的语言向两个方向发展： C++/Java更强调类型，对类型的检查更严格 JavaScript、Python、PHP不看中类型，甚至不需要事先定义 类型安全 支持强类型的观点认为明确的类型有助于尽早发现程序中的简单错误 反对强类型的观点认为过于强调类型迫使程序员面对底层、实现而非事务逻辑 总的来说，早期语言敲掉类型，面对底层的语言强调类型 C语言需要类型，但是对类型的安全检查并不足够 C语言的类型 整数 char、short、int、long、long long 浮点数 float、double、long double 逻辑 bool 指针 自定义类型 类型的不同 类型名称：int、long、double 输入输出时的格式化：%d、%ld、%lf 所表示的数的范围：char&lt;shortr&lt;int&lt;float&lt;double 内存中所占据的大小：1个字节到16个字节 内存中的表现形式：二进制数（补码）、编码 sizeof 是一个运算符，给出某个类型或变量在内存中所占据的字节数 是静态运算符，在编译时刻就就决定了 不要在sizeof的括号里做运算，运算无用 整数 char：1字节（8比特）：-128~127 short：2字节：-32768~32767 int：取决于编译器（CPU），通常的意义是”一个字” long：取决于编译器（CPU），通常的意义是”一个字” long long：8字节 unsigned 在整数类型前加上unsigned使得它们成为无符号的整数 内部的二进制表达没变，变的是如何看待它们 如果一个字面量常数想要表达自己是unsigned,可以在后面加U或者u 初衷并非拓展数能表达的范围，而是为了做纯二进制运算，主要是为了移位 浮点类型 类型 字长 范围 有效数字 float 32 ±(1.20x10 0,±inf,nan 7 double 64 ±(2.2x10 0,±inf,nan 15 浮点输入输出 类型 scanf printf float %f %f,%e double %lf %f,%e 字符类型char是一种整数，也是一种特殊的类型:字符。这是因为: 用单引号表示的字符字面量:‘a’,’1’ ‘’也是一个字符 printf和scanf里用%c来输入输出字符 逃逸字符 字符 意义 字符 意义 \b 回退一格 &quot; 双引号 \t 到下一个表格位 &#39; 单引号 \n 换行 \ 反斜杠本身 \r 回车 bool #include&lt;stdbool.h&gt; 之后就可以使用bool,和true、false bool实际上还是以int的手段实现的，所以可以当做int来计算 也只能当做int来输入输出 类型转换自动类型转换 当运算符的两边出现不一致的类型时，会自动转换成较大的类型 对于printf，任何小于int的类型会被转换成int；float会转换成double 但是scanf不会，想要输出short，需要%hd 强制类型转换 要把一个量强制转换成另一个类型（通常是较小的类型），需要: (类型)值 注意安全性，小的变量不总能表达大的量 只是从那个变量计算出一个新的类型的值，它并不改变那个变量，无论是值还是类型都不改变 强制类型转换的优先级高于四则运算 第六节：函数函数的定义 函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值 调用函数 函数名(参数值); ()起到了表示函数调用的重要作用，即使没用参数也需要() 如果有参数，则需要给出正确的数量和顺序 这些值会按照顺序一次用来初始化函数中的参数 函数返回 函数知道每一次是哪里调用它，会返回到正确的地方 return停止函数的执行，并送回一个值 return;/return 表达式; 一个函数里可以出现多个return语句 没有返回值的函数 void函数名(参数表) 不能使用带值的return 可以没有return 调用的时候不能做返回值的赋值 如果函数有返回值，则必须使用带值的return 函数先后关系12 像这样把sun()写在上面是因为: C的编译器自上而下顺序分析你的代码 在看到sum(1,10)的时候，他需要知道sum()的样子 也就是sum()要几个参数,每个参数的类型如何,返回什么类型 这样它才能检查你对sum()的调用是否正确 倘若不知道，也就是把要调用的函数放到下面了，旧标准会假设你所调用的函数所有的参数都是int，返回也是int 函数原型 函数头，以分号“;”结尾，就构成了函数的原型 函数原型的目的是告诉编译器这个函数长什么样（名称，参数（数量及类型），返回类型） 旧标准习惯把函数原型写在调用他的函数里面，现一般写在调用它的函数前面 调用函数 如果函数有参数，调用函数是必须传递给它数量、类型正确的值 可以传递给函数的值是表达式的结果，包括：字面量、变量、函数的返回值、计算的结果 类型不匹配 调用函数时给的值与参数的类型不匹配是C语言传统上最大的漏洞 编译器总是悄悄替你把类型转换好，但是这很可能不是你所期望的 传值 C语言在调用函数时，永远只能传值给函数 每个函数有自己的变量空间，参数特位于这个独立的空间中没和其他函数没有关系 过去，对于函数参数表中的参数，叫做“形式参数”，调用函数时给的值，叫做“实际参数“ 本地变量 函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数的的这次运行所独有的，称作本地变量 定义在函数内部的变量就是本地变量 参数也是本地变量 变量的生存期和作用域 生存期:什么时候这个变量开始出现了，到什么时候他消亡了 作用域：在（代码的）什么范围内可以访问这个变量（这个变量可以起作用） 对于本地变量，这两个问题的答案是统一的:大括号内——块 本地变量的规则 本地变量是定义在块内的 它可以使定义在函数的块内 也可以定义在语句的块内 甚至可以随便拉一对大括号来定义变量 程序运行进入这个块之前，其中的变量不存在，离开这个块，其中的变量就消失了 块外面定义的变量在里面仍然有效 快里面定义了和外面同名的变量则掩盖了外面的 不能在一个块内定义同名的变量 本地变量不会被默认初始化 参数在进入函数的时候就被初始化了 数组定义数组 &lt;类型&gt;变量名称[元素数量]; int grades[100]; double weight[20]; 元素数量必须是整数 C99之前:元素数量必须是编译时刻确定的字面量 是一种容器（放东西的东西）特点是： 其中所有的元素具有相同的数据类型； 一旦创建，不能改变大小 *（数组中的元素在内存中是连续依次排列的） 数组的大小 sizeof给出整个数组所占据的内容的大小，单位是字节：sizeof(a)/sizeof(a[0]) sizeof(a[0])给出数组中单个元素的大小，于是相除就得到了数组的单元个数 这样的代码，一旦修改数组中初始的数据，不需要修改遍历的代码 数组的赋值 数组变量本身不能被赋值 要把一个数组的所有元素交给另一个数组，必须采用遍历 通常都是使用for循环让循环变量i从0到&lt;数组的长度，这样循环体内最大的i正好是数组最大的有效下标 数组作为函数参数时，往往必须再用另一个参数来传入数组的大小，且不能再[]中给出数组的大小，不能再可利用sizeof来计算数组的元素个数]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo简单使用]]></title>
    <url>%2Fhexo%2Fhexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[常用指令|Hexo new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1$ hexo new "post title with whitespace" generate1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 该命令可以简写为 1$ hexo g sever1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站 参数 描述 -g, --generate 部署之前预先生成静态文件 该命令可以简写为： 1$ hexo d clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 迁移 将hexo博客转移到另一电脑 拷贝或者将本机hexo的文件上传到GitHub保管 在新的电脑上部署好hexo的运行环境 将hexo所有文件转移到新的电脑之上 ssh-keygen -t rsa -C “q1447463697@gmail.com“命令生成 id_rsa密钥、id_rsa.pub公钥 在GitHub中选择setting-&gt;SSH and GPG keys -&gt; 右上角的New SSH key，配置好新电脑上的公钥 git bash here进入hexo文件夹，开始进行hexo博客开发工作]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Vue2.0入门-内部指令]]></title>
    <url>%2Funcategorized%2FVue2-0%E5%85%A5%E9%97%A8-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[渐进式JavaScript框架Vue入门学习第一节——内部指令 前言下载官方网站：https://vuejs.org/ 开发版本：包含完整的警告和调试模式 生产版本：包含完整的警告和调试模式 项目结构搭建用npm进行全程安装 1npm install live-server -g 在项目目录中打开 1live-server 第一节：编写第一个HelloWorld代码：1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt; &lt;title&gt;HelloWorld&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;HelloWorld&lt;/h1&gt; &lt;hr&gt; &lt;div id="app"&gt; &#123;&#123;message&#125;&#125; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app=new Vue(&#123; el: '#app', data:&#123; message: 'hello world!' &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第二节：v-if&amp;v-else&amp;v-show指令v-if的使用：v-if:是vue的一个颞部指令，指令用于我们的html中。 v-if用来判断是否加载html的DOM，比如我们模拟一个用户登录状态，在用户登录后显示用户名称。 关键代码： 1&lt;div v-show="isLogin"&gt;你好，Neo!&lt;/div&gt; 完整html代码: 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt; &lt;title&gt;v-if &amp; v-show &amp; v-else&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;v-if 判断是否加载&lt;/h1&gt; &lt;hr&gt; &lt;div id="app"&gt; &lt;div v-if="isLogin"&gt;你好：Neo！&lt;/div&gt; &lt;div v-else&gt;请登录后操作&lt;/div&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app=new Vue(&#123; el:'#app', data:&#123; isLogin:false &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这里我们在vue的data里定义了isLogin的值，当它为true时，网页就会显示:你好：Neo，如果为false时，就显示请登录后操作。 v-show的使用：调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。 1&lt;div v-show="isLogin"&gt;你好，Neo!&lt;/div&gt; v-if 和v-show的区别： v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。 v-show：调整css dispaly属性，可以使客户端操作更加流畅。 第三节：v-for指令：解决模板循环问题v-for指令是循环渲染一组data中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且item是数组元素迭代的别名 一、基本用法：模板(html)写法 123&lt;li v-for="item in sortitems"&gt; &#123;&#123;item&#125;&#125;&lt;/li&gt; js写法 123456var app=new Vue(&#123; el:'#app', data:&#123; items:[20,23,18,65,32,19,54,56,41] &#125;&#125;) 完整代码 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt; &lt;title&gt;V-for 案例&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;v-for指令用法&lt;/h1&gt; &lt;hr&gt; &lt;div id="app"&gt; &lt;ul&gt; &lt;li v-for="item in items"&gt; &#123;&#123;item&#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app=new Vue(&#123; el:'#app', data:&#123; items:[20,23,18,65,32,19,54,56,41] &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这是一个最基础的循环，先在js里定义了items数组，然后在模板中用v-for循环出来，需要注意的是，你需要那个html标签循环，v-for就写在那个上边。 二、排序我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的computed:属性。 12345computed:&#123; sortItems:function()&#123; return this.items.sort(); &#125;&#125; 我们在computed里新声明了一个对象sortItems，如果不重新声明会污染原来的数据源，这是Vue不允许的，所以你要重新声明一个对象。 如果一切顺利的话，你已经看到了结果，但是这个小程序还是有个小Bug的，现在我把数组修改成这样 1items:[20,23,18,65,32,19,5,56,41] 我们把其中的54修改成了5，我们再看一下结果，发现排序结果并不是我们想要的。 我们可以自己编写一个方法sortNumber，然后传给我们的sort函数解决这个Bug 12345computed:&#123; sortItems:function()&#123; return this.items.sort(sortNumber); &#125; &#125; 经过一番折腾，我们终于实现了真正的数字排序 三、对象循环输出我们上边循环的都是数组，那我们来看一个对象类型的循环是如何输出的。 我们先定义一个数组，数组里边是对象数据 123456students:[ &#123;name:'Neo',age:18&#125;, &#123;name:'无关风月',age:17&#125;, &#123;name:'张老板',age:21&#125;, &#123;name:'狗社长',age:20&#125;,] 在模板中输出 12345&lt;ul&gt; &lt;li v-for="student in students"&gt; &#123;&#123;student.name&#125;&#125; - &#123;&#123;student.age&#125;&#125; &lt;/li&gt;&lt;/ul&gt; 加入索引序号： 12345678//数组对象方法排序:function sortByKey(array,key)&#123; return array.sort(function(a,b)&#123; var x=a[key]; var y=b[key]; return ((x&lt;y)?-1:((x&gt;y)?1:0)); &#125;);&#125; 有了数组的排序方法，在computed中进行调用排序 123sortStudent:function()&#123; return sortByKey(this.students,'age');&#125; 注意：vue低版本中 data里面的items和computed里面可以一样，但是高版本，是不允许相同名称。有很多小伙伴踩到了这个坑，这里提醒学习的小伙伴，根据自己版本的不同，请修改代码。 第四节：v-text&amp;v-html我们已经会在html中输出data中的值了，我们已经用的是,这种情况是有弊端的，就是当我们网速很慢或者javascript出错时，会暴露我们的。Vue给我们提供的v-text,就是解决这个问题的。我们来看代码： 1&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;=&lt;span v-text="message"&gt;&lt;/span&gt;&lt;br/&gt; 如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。 1&lt;span v-html="msgHtml"&gt;&lt;/span&gt; 双大括号会将数据解释为纯文本，而非HTML。为了输出真正的HTML，你就需要使用v-html 指令。 需要注意的是：在生产环境中动态渲染HTML是非常危险的，因为容易导致XSS攻击。所以只能在可信的内容上使用v-html，永远不要在用户提交和可操作的网页上使用。 完整代码： 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt; &lt;title&gt;v-text &amp; v-html 案例&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;v-text &amp; v-html 案例&lt;/h1&gt; &lt;hr&gt; &lt;div id="app"&gt; &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;=&lt;span v-text="message"&gt;&lt;/span&gt;&lt;br/&gt; &lt;span v-html="msgHtml"&gt;&lt;/span&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app=new Vue(&#123; el:'#app', data:&#123; message:'hello Vue!', msgHtml:'&lt;h2&gt;hello Vue!&lt;/h2&gt;' &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第五节：v-on:绑定事件监听器v-on 就是监听事件，可以用v-on指令监听DOM事件来触发一些javascript代码。 使用绑定事件监听器，编写一个加分减分的程序。 程序代码 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt; &lt;title&gt;v-on事件监听器&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;v-on 事件监听器&lt;/h1&gt; &lt;hr&gt; &lt;div id="app"&gt; 本场比赛得分： &#123;&#123;count&#125;&#125;&lt;br/&gt; &lt;button v-on:click="jiafen"&gt;加分&lt;/button&gt; &lt;button v-on:click="jianfen"&gt;减分&lt;/button&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var app=new Vue(&#123; el:'#app', data:&#123; count:1 &#125;, methods:&#123; jiafen:function()&#123; this.count++; &#125;, jianfen:function()&#123; this.count--; &#125; &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 我们的v-on 还有一种简单的写法，就是用@代替。 1&lt;button @click="jianfen"&gt;减分&lt;/button&gt; 我们除了绑定click之外，我们还可以绑定其它事件，比如键盘回车事件v-on:keyup.enter,现在我们增加一个输入框，然后绑定回车事件，回车后把文本框里的值加到我们的count上。 绑定事件写法： 1&lt;input type="text" v-on:keyup.enter="onEnter" v-model="secondCount"&gt; javascript代码： 123onEnter:function()&#123; this.count=this.count+parseInt(this.secondCount);&#125; 因为文本框的数字会默认转变成字符串，所以我们需要用parseInt()函数进行整数转换。 也可以根据键值表来定义键盘事件： 第六节：v-model指令v-model指令，我理解为绑定数据源。就是把数据绑定在特定的表单元素上，可以很容易的实现双向数据绑定。 一、简单的双向数据绑定代码：html文件 12345&lt;div id="app"&gt; &lt;p&gt;原始文本信息：&#123;&#123;message&#125;&#125;&lt;/p&gt; &lt;h3&gt;文本框&lt;/h3&gt; &lt;p&gt;v-model:&lt;input type="text" v-model="message"&gt;&lt;/p&gt;&lt;/div&gt; javascript代码： 123456var app=new Vue(&#123; el:'#app', data:&#123; message:'hello Vue!' &#125; &#125;) 二、修饰符 .lazy：取代 imput 监听 change 事件。 .number：输入字符串转为数字。 .trim：输入去掉首尾空格。 三、文本区域加入数据绑定1&lt;textarea cols="30" rows="10" v-model="message"&gt;&lt;/textarea&gt; 四、多选按钮绑定一个值123&lt;h3&gt;多选按钮绑定一个值&lt;/h3&gt;&lt;input type="checkbox" id="isTrue" v-model="isTrue"&gt;&lt;label for='isTrue'&gt;&#123;&#123;isTrue&#125;&#125;&lt;/label&gt; 五、多选绑定数组12345678910&lt;h3&gt;多选框绑定数组&lt;/h3&gt;&lt;p&gt; &lt;input type="checkbox" id="neo" value="neo" v-model="web_names"&gt; &lt;label for="isTrue"&gt;neo&lt;/label&gt; &lt;input type="checkbox" id="狗社长" value="狗社长" v-model="web_names"&gt; &lt;label for="isTrue"&gt;狗社长&lt;/label&gt; &lt;input type="checkbox" id="张老板" value="张老板" v-model="web_names"&gt; &lt;label for="isTrue"&gt;张老板&lt;/label&gt;&lt;/p&gt;&lt;p&gt;&#123;&#123;web_names&#125;&#125;&lt;/p&gt; 六、单选按钮绑定数据123456&lt;h3&gt;单选按钮绑定&lt;/h3&gt;&lt;input type="radio" id="one" value="男" v-model="sex"&gt;&lt;label for="one"&gt;男&lt;/label&gt;&lt;input type="radio" id="two" value="女" v-model="sex"&gt;&lt;label for="one"&gt;女&lt;/label&gt;&lt;p&gt;&#123;&#123;sex&#125;&#125;&lt;/p&gt; 第七节：v-bind指令v-bind是处理HTML中的标签属性的，例如 html文件: 123&lt;div id="app"&gt; &lt;img v-bind:src="imgSrc" width="200px"&gt;&lt;/div&gt; 在html中我们用v-bind:src=”imgSrc”的动态绑定了src的值，这个值是在vue构造器里的data属性中找到的 js文件: 123456var app=new Vue(&#123; el: '#app', data:&#123; imgSrc: "../233.jpg" &#125; &#125;) 我们在data对象在中增加了imgSrc属性来供html调用。 v-bind缩写 1234&lt;!-- 完整语法 --&gt;&lt;a v-bind:href="url"&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href="url"&gt;&lt;/a&gt; 绑定CSS样式在工作中我们经常使用v-bind来绑定css样式： 在绑定CSS样式是，绑定的值必须在vue中的data属性中进行声明。 1、直接绑定class样式 1&lt;div :class="className"&gt;1、绑定classA&lt;/div&gt; 2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。 1&lt;div :class="&#123;classA:isOk&#125;"&gt;2、绑定class中的判断&lt;/div&gt; 3、绑定class中的数组 1&lt;div :class="[classA,classB]"&gt;3、绑定class中的数组&lt;/div&gt; 4、绑定class中使用三元表达式判断 1&lt;div :class="isOk?classA:classB"&gt;4、绑定class中的三元表达式判断&lt;/div&gt; 5、绑定style 1&lt;div :style="&#123;color:red,fontSize:font&#125;"&gt;5、绑定style&lt;/div&gt; 6、用对象绑定style样式 1&lt;div :style="styleObject"&gt;6、用对象绑定style样式&lt;/div&gt; 123456789var app=new Vue(&#123; el:'#app', data:&#123; styleObject:&#123; fontSize:'24px', color:'green' &#125; &#125;&#125;) 第八节：其他内部指令(v-pre&amp;v-cloak&amp;v-once)v-pre指令在模板中跳过vue的编译，直接输出原始值。就是在标签中加入v-pre就不会输出vue中的data值了 1&lt;div v-pre&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt; 这时并不会输出我们的message值，而是直接在网页中显示 v-cloak指令在vue渲染完指定的整个DOM后才进行显示。它必须和CSS样式一起使用 123[v-cloak] &#123; display: none;&#125; 123&lt;div v-cloak&gt; &#123;&#123; message &#125;&#125;&lt;/div&gt; v-once指令在第一次DOM时进行渲染，渲染完成后视为静态内容，跳出以后的渲染过程。 12&lt;div v-once&gt;第一次绑定的值：&#123;&#123;message&#125;&#125;&lt;/div&gt;&lt;div&gt;&lt;input type="text" v-model="message"&gt;&lt;/div&gt;]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不悔梦归处，只恨太匆匆]]></title>
    <url>%2Funcategorized%2F%E4%B8%8D%E6%82%94%E6%A2%A6%E5%BD%92%E5%A4%84%EF%BC%8C%E5%8F%AA%E6%81%A8%E5%A4%AA%E5%8C%86%E5%8C%86%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[故梦]]></title>
    <url>%2Funcategorized%2F%E6%95%85%E6%A2%A6%2F</url>
    <content type="text"><![CDATA[生命中曾经有过的所有灿烂，原来终究，都需要用寂寞来偿还。 又一年六月半晚风凉，斜阳渐矮只影长。明明还没有准备好，就已经毕业了，我既是旁观者也是亲历者。幸运的是，今年的我，已经学会了好好道别了，尽管难以掩饰自己的心情，还是止不住泪水狂涌，夹杂的不仅仅是对汤圆的不舍，还有对他日自己的不安，以及对整个高中时代的告别，因为，他们已经毕业迈入社会了，快的让人猝不及防。 至此，已经没有幼稚的理由了吧，带我入门的学长学姐已经开始为生活奔波了，好在都有好好的道别了，我不知道明年今日的自己，会以怎样的姿态坦然的离开，我不想做好准备，也不想去想，只希望时间慢一些，能让我好好的离开，不像四年前的我只想着逃离。 再说汤圆，第一次相遇在寝室，类似于传销似的拉我入坑，给予我机会让我能实现理想与抱负，除了感激，亦复何言。期初觉得甩手烂摊子，总觉得做的苦差事，费力不讨好，到如今，一切的一切，都是那么的妙不可言，电竞社成为了我心灵后头的慰藉，有血有肉，丰富了我的大学生活和人格，结识了些许好友，以及很多的弟弟妹妹，像是一个避风港，像是一个家庭，一个能让我无比安心的地方。你说时运不济，对我的嘱咐像是白帝城托孤，而我，好像也完成了身未升腾思退步，功成应忆去时言。只因先主丁宁后，星落秋风五丈原的历史进程。总之，咱们的大学生涯到这算是戛然而止，如今的我更多的是追求个人人生价值和幸福了。 谁的歌声轻轻 轻轻唱 谁的泪水静静淌 那些年华都付作过往 他们偎依着彼此说好要面对风浪 又是一地枯黄 枫叶红了满面秋霜 这场故梦里 人生如戏唱 还有谁登场]]></content>
      <tags>
        <tag>回忆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR使用教程]]></title>
    <url>%2Funcategorized%2FSSR%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[我们每一个人，自从出生的那一刻起，便是自由的。不管阻挡我们的人有多么强大，都没有关系。火焰之水也好，冰之大地也好，无论什么都好，能够亲眼看见那些东西的人，才是这个世界上获得最大自由的人。 WINDOWS下载软件1.点击左侧用户中心(手机需先点左上角按钮调出导航菜单) 2.找到快速添加节点 3.点击下载客户端 导入节点解压客户端双击shadowsocksr4.0的客户端(打不开就用2.0，2.0打不开请下载安装net.framework3.0，还打不开麻烦升级到win7) 方法一： 在快速添加节点中找到【备用节点导入方法】 点击其中的链接 找到系统托盘菜单中的SSR纸飞机图标右键调出菜单 点击剪贴板批量导入ssr://链接 方法二(推荐)： 在快速添加节点中找到节点订阅地址 点击按钮复制订阅链接 找到系统托盘菜单中的SSR纸飞机图标右键调出菜单 打开SSR服务器订阅链接设置 点击add添加一个订阅，将复制的链接填入右侧框内点击确定 找到系统托盘菜单中的SSR纸飞机图标右键调出菜单 点击更新SSR服务器订阅(不通过代理) 选择节点 找到系统托盘菜单中的SSR纸飞机图标右键调出菜单 服务器-&gt;找到对应本站的节点组-&gt;选择一个节点单击 打开浏览器输入www.google.com试试吧！ 以上教程均为电脑没有安装过任何代理软件的步骤，如果安装过其他代理软件可能产生冲突 MACOS把下载的DMG包放入应用程序列表 打开程序 如提示不安全，请到系统偏好设置打开程序 服务器-编辑订阅 点击+号后填入订阅链接后手动更新订阅 选择一个节点 打开谷歌测试一下吧 LINUX Ubuntu使用Shadowsocks-qt5科学上网说明：shadowsocks-qt5是ubuntu上一个可视化的版本 安装shadowsocks-qt51231.$ sudo add-apt-repository ppa:hzwhuang/ss-qt52.$ sudo apt-get update3.$ sudo apt-get install shadowsocks-qt5 检测安装是否成功如果安装成功之后，按win键搜索应该能够找到软件，如下图所示： 配置shadowsocks-qt5填写对应的服务器IP，端口，密码，加密方式，红色标注地方请与图片一样 配置系统代理模式 配置浏览器代理模式（本次为Ubuntu自带FireFox浏览器为例） 连接并开始上网 IOS前往用户中心查看App Store账号(国区App Store已下架) 打开App Store 切换账号，并下载App 导入节点 附加:ios快速链接 ANDROID下载APP 添加订阅并更新 选择一个节点并设置路由 连接 注释：国产安卓系统为定制系统，如需要Youtube、Google套件等，需要安装Google框架，具体机型如何安装各不相同，请直接查找教程 教程来源:http://ohssr.net/user/announcement]]></content>
      <tags>
        <tag>Wall.Maria</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SS/SSR简介]]></title>
    <url>%2Funcategorized%2FSS-SSR%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[SS 的全称是 Shadowsocks，是一种加密的传输方式（一种基于 Socks5 代理方式的网络数据加密传输包）；SS 是目前主流的科学上网方式，是目前最稳定最好用的科学上网工具之一。SSR（全称 ShadowsocksR ）是 SS 的修改版，也算是增强版，是在SS 的基础上做了些功能的增加和修改。有很多的 SS 客户端，但是仅仅有 SS 客户端还不能翻墙，还得需要在SS 客户端中添加正常可用的 SS 信息，SS 信息可以自己买 VPS 服务器搭建，也可以买别人搭建好的，也有人搭建了免费共享出来的。网上卖 SS 信息的非常多非常多（不过跑路的也很多，自己当心），但都不是官方提供，SS 官网并不卖服务。 个人觉得不错的SS / SSR服务商（机场）： SS / SSR / V2Ray服务商（机场）推荐：Dler Cloud https://www.rixcloud.me（专业性的NO.1） https://www.yoyutrans.com（服务器质量不错，速度也很好，有部分阿里内网专线和20个香港Azure，以及其他地区的，全部独享线路，线路大概在90条+） https：//喵帕斯.com（机场届老牌性价比很高） https://www.muncloud.net（很不错的一家，性价比不错，60 +节点。） https://agentneo.co（一家正在成长期的机场） http://www.dropboxchina.com/ss.html https://panda-cloud.me (企业级的AnyConnect服务） 浅谈部分机场（SS / SSR提供商）的使用感受 - 毒药 https://github.com/387099/SSR/issues/1 https://www.duyaoss.com/index.php/archives/3 http://www.evernote.com/l/AmEIfRIK0H9LE5XUla9dVz21Q8NQ5sVaxMM 记录一下SS的前世今生，以及一个简单的教程总结 https://github.com/JadaGates/ShadowsocksBio 免费SS账号分享（PS：能不能用，能用多久，我就不确定了） https://free-ss.site https://tool.ssrshare.us/tool/free_ssr SSR免费节点订阅地址（PS：至于节点能不能用我就不知道了，别人分享的） https://github.com/ImLaoD/sub/raw/master/ssrshare.com https://github.com/ImLaoD/sub/raw/master/v2ray_ssrshare.com https://github.com/AmazingDM/sub/raw/master/ssrshare.com https://sub.global.vtr.cool/v2sub/rvdwt?rocket=1 https://yzzz.ml/freessr 区别VPN也是传输方式，VPN默认是全局的（也有少数是可以分流的），开启后所有App软件都会走代理，而且VPN的特征值太明显，目前已被G·F·W干扰.SS是和VPN完全不同类型的东西，SS的客户端是智能代理智能分流，根据规则自动判断，只有被墙了的才会走代理（自己也可以设置代理域名和IP），不需要代理的走直连，这样就可以7x24的开启SS，国内和没被墙的走直连不走代理，国内国外两不误.SS比VPN好用太多了！ 相比传统的VPN（IKE，IPSec，PPTP …），相关传统V2Ray这种科学上网的集合体，Shadowsocks在服务端更加轻量，单一协议完善程度更高;在移动端有更丰富的客户端选择，兼容性和灵活性更优。（此段摘自：https： //medium.com/@unbiniliumm/95187ef07ced） 耗电为什么使用了代理应用后在电量统计中显示耗电很多？这是移动操作系统的一个特殊机制，Surge，Quantumult，Shadowrocket等等所有的SS客户端开启后会接管全局的（几乎）所有通信，所以所有的网络方面电量消耗都会被算在SS客户端头上，实际使用中不会感到SS客户端对电量有明显影响，“设置 - 电池”中看到它的电池用量，绝大部分都是网络所消耗的电量，并不是SS客户端消耗的电量，SS客户端就是背锅侠。网络流量也是如此的。 客户端推荐客户端 iOS：Surge 3，Quantumult，Shadowrocket Android：ClashA，Surfboard macOS：浪费Mac，ClashX Windows：Clash for Windows Linux：Clash（下方有下载地址） ios客户端（全区可下载） Pharos lite TestFlight 绕道费 ¥6.00 iOS客户端（仅国区下架，其他区可下载） Surge 3免费+内购¥328.00 浪涌企业免费 Quantumult $ 4.99（也叫：圈） Shadowrocket $ 2.99（也叫：小火箭） Kitsunebi $ 0.99 Pharos Pro $ 0.99 Pepi 1.99美元 Potatso 2 $ 2.99 A.BIG.T免费 Ranger NetworkTool 1.99美元 Wingy $ 0.99 FirstWingy $ 0.99 Loon 1.99美元 ShadowPocket $ 0.99 AnyFlow 4.99美元 影鱼 $ 0.99 ShadowTunnel 2.99美元 Speedflow $ 0.99 爱丽丝 1.99美元 飞跃 1.99美元 影纤 $ 8.99 iCProxy $ 1.99 ShadowProxy $ 0.99 ShadowLink免费版 大纲免费 Potatso Lite免费版 XNode免费 Mume VPN Free NetShuttle免费版 黄鹂免费 Brook Free Fugu2免费 基岩免费 iOS客户端（全区下架） 浪涌2 $ 49.99 交叉 便门 Wingy Kitsunebi ¥30.00 SuperWingy ¥3.00 ShadowRocket - Wingy ¥12.00 GoodShadow ¥1.00 ShadowBroken ¥12.00 寒梅 - Mume Red ¥128.00 香蕉网 ¥3.00 SuperRocket ¥3.00 A.BIG.T IV ¥68.00 Wingy - 速度SSR ¥18.00 AnyLink Free SkipWorld免费版 SsrConnectPro免费 采取 ShadowAgent LIFI OpenWingy 阴影 电路捷径 水滴 SsrConnect WormholeX 凿 秒连VPN …… macOS客户端 适用于Mac的浪费$ 49.99 / $ 69.99 / $ 99.99 ClashX Free 冲突免费 ShadowsocksX-NG-R8免费 electron-ssr Free A.BIG.T ¥30.00 ShadowTunnel免费 重生自由 大纲免费 免费班车 shadowsocks浏览器！¥18.00 SsrConnectPro ¥3.00 GoAgentX免费版 非官方GoAgentX Free Flora Free 后面的下架 SpechtLite免费 浅黄色 夜莺 Free +内购 Algo - 在云中设置个人IPSEC VPN。 SpechtLite - 支持Shadowsocks及规则管理的高效率代理。 ShadowsocksX - 一个快速的隧道代理，可以帮助你绕过防火墙。 ShadowsocksX-NG - 一款ShadowsocksX客户端软件。 Lantern - 科学上网。 Tunnelbear - 简单的私人VPN。 Tunnelblick - OpenVPN的免费软件。 GoAgentX - 科学上网。 Surge - 科学上网。 LoCoVPN - 每天签到可获得2小时免费VPN加速。 二师兄VPN - 提供无限流量，无限续期免费VPN账号。 GTX加速器 - 每天签到领取500M流量。 风驰VPN - 无限流量，无限续期的免费VPN加速服务。 tinc - VPN软件。 Shimo - 连接大量VPN的应用 V2Ray - 原生支持Socks，HTTP，Shadowsocks，VMess等协议。 FreeVPN Plus - 永不过期Mac免费VPN。 Firefly萤火虫 - 免费科学上网。 V2rayU - 一款v2ray客户端软件。 ClashX - 基于clash的一款支持规则过滤的科学上网工具。 Windows客户端 用于Windows的冲突 冲突 2.6.8 Shadowsocks 2.3.1（XP系统可用） ShadowsocksR（简称：SSR） ShadowsocksRR（简称：SSRR） SSRR ShadowsocksD（简称：SSD） 电子-SSR x2tap 穿梭 大纲 植物群 SSCAP SSTap sockscap里 简单obfs kcptun Android客户端 ClashA Surfboard（冲浪板支持导入浪涌配置） 灯塔 狐火 Kitsunebi Google Play Shadowsocks影梭 Shadowsocks影梭谷歌播放 Shadowsocks影梭Google Play Beta版 Simple Obfuscation（影梭的混淆插件） 简单混淆Google Play（影梭的混淆插件） ShadowsocksR（简称：SSR） ShadowsocksRR（简称：SSRR） ShadowsocksD（简称：SSD） 大纲 NetPatch 后面的（后面的支持导入浪涌配置） BifrostV kcptun，机器人 Linux客户端 冲突 电子-SSR 2.6.8-QT5 ShadowsocksR（简称：SSR） 大纲 Avege 植物群 穿梭 kcptun 梅林路由器 冲突梅兰日兰 fancyss OpenWRT客户端 KoolClash 的OpenWRT-2.6.8 其他 iOS设备上使用SS客户端也会显示VPN图标：是因为使用了iOS系统的VPN网络扩展接口（以及NEPacketTunnelProvider和NWUDPSession组件），iOS 9才开放的此接口，这些新接口让我们可以制作出私密协议的VPN产品，苹果官方称之为企业VPN。正是因为iOS 9之后开放了这个接口和组件才能有今天iOS上的各式各样的SS客户端。官方文档：https：//developer.apple。 COM /文档/ networkextension SS / SSR客户端，在连接SS / SSR服务器的同时也会在本机开启SOCKS5或HTTP连接，用于本机软件和同一局域网内的其它设备连接; SS / SSR信息部分必须和SS / SSR服务器信息一致。本地开启的SOCKS5与SS / SSR信息无关的，本机的软件和同一局域网内的其他设备只需要连接此台机器就行了，IP和端口也必须和SS / SSR客户端上开启的信息一致。本机的软件和同一局域网内的其他设备通过SOCKS5连接到此台机器的SS / SSR客户端，SS / SSR客户端再连接到SS / SSR服务器。 最后引用一句话： 翻墙让你知道更多，知道更多反而不会快乐；被真相支配的痛苦，被圈养获得的安逸，墙的意义，尽在于此。 转载自：https://congcong0806.github.io/2018/04/20/SS]]></content>
      <tags>
        <tag>Wall.Maria</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora入门]]></title>
    <url>%2Fhexo%2FTypora%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[写Markdown费事？Typora让你像写word一样行云流水，所见即所得。 Typora简介 Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。 Markdown的语法因不同的解析器或编辑器而异，Typora使用的是GitHub Flavored Markdown。 下载Typora下载。 常用快捷键 加粗： Ctrl/Cmd + B 标题： Ctrl/Cmd + H 插入链接： Ctrl/Cmd + K 插入代码： Ctrl/Cmd + Shift + C 行内代码： Ctrl/Cmd + Shift + K 插入图片： Ctrl/Cmd + Shift + I 无序列表： Ctrl/Cmd + Shift + L 撤销： Ctrl/Cmd + Z 一级标题：快捷键为Crtl + 1，以此类推 块元素换行符在markdown中，段落由多个空格分隔。在Typora中，只需回车即可创建新段落。 标题级别 一级标题，快捷键为Ctrl+1 二级标题，快捷键为Ctrl+2 六级标题，快捷键为Ctrl+6 引用文字 ＞+空格 + 引用文字 清单输入·列表内容将创建一个无序列表，该*符号可以替换为+或-。 输入1. 列表内容 将创建一个有序列表，其markdown源代码如下： 无序列表 AA BB CC 有序列表 AA BB CC 任务列表 -[ ] 不勾选 -[✔️] 勾选 代码块在Typora中输入””” + 回车，并在后面选择一个语言名称即可语法高亮。 语法高亮 123&gt;def helloworld():&gt; print 'hello world'&gt; 数学表达式输入$$，然后按“回车”键，如下：$$ $$\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix}$$\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \end{vmatrix}$$ 表输入| 表头1 | 表头2 |并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下： 表头1 表头2 脚注 你可以创建一个脚注，像这样[^1] [^ 1]: input description here 注意：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。 分割线输入***或--- 再按回车即可绘制一条水平线，如下： YAML Front MatterTypora支持YAML Front Matter， 在文章开头输入---，然后按回车即可。 目录（TOC）输入[toc]然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。 跨度元素跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。 链接内部链接 这是一个带有标题属性的链接. 这是一个没有标题属性的链接](http://example.net/)). 效果如下： 这是一个带有标题属性的链接. 这是一个没有标题属性的链接. 参考链接 这是一个[参考链接]id。 [id]: http://example.com/ “标题” 这是一个参考链接。 网址Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。输入q1447463697@gmail.comTypora还会自动链接标准网址。例如：zhanghonggang.com 图片 倾斜 *单个星号* _单下划线_ 效果如下： 单个星号 单下划线 加粗 *两个星号* \双下划线 效果如下：两个星号双下划线 代码标记标记代码使用反引号，即在英文输入法下，ESC键下面和1键左边的符号——` 使用该`printf()`功能。 效果如下：使用该printf()功能。 删除线 ~删除线~ 效果如下：删除线 下划线&lt;u&gt;下划线&lt;/u&gt;: Ctrl+u 效果如下： 下划线 表情符号​:smile: :smile:(注意为：是英文的冒号) :smile: 下标H~2~O (需在设置中打开该功能) 上标X^2^(需在设置中打开该功能) 高亮==高亮==(需在设置中打开该功能) HTML支持HTML 嵌入内容支持iframe-based嵌入代码 &lt; iframe height=’265’ scrolling=’no’ title=’Fancy Animated SVG Menu’ src=’http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2’ frameborder=’no’ allowtransparency=’true’ allowfullscreen=’true’ style=’width: 100%;’&gt; 视频 &lt; video src=”xxx.mp4” /&gt; 总结： 建议打开大纲视图（快捷键ctrl + shift + 1）。 插入表格需要顶格写，不然显示不出来。 以上语法不用刻意记，在Typora中的右键菜单都有， 常用功能基本上都有快捷键。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[昨天的你的现在的未来]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%98%A8%E5%A4%A9%E7%9A%84%E4%BD%A0%E7%9A%84%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%9C%AA%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[如今，我们形色匆忙，哪里还去铭记，曾经那细致而微的痛苦；那些特别想做却被阻拦过的梦；特别想在一起却终究无力同行的人；那些我们曾经明白了生离死别意义的艰难岁月；让我们一夜成长的悲伤过去；明亮的或者黑暗的，仿佛也早已随风而去了。多少深情，不过是付给将来说书人一句，哦，你说那个人那个事啊，偏偏我们故作镇定，轻描淡写，也或许，我们内心都知道，只是没有人跟我们说，朋友，不要沉溺在离开的人，过去的事的回忆里，因为他们曾经来过，但，也请不要忘记他们。 ——《艾迪芬奇的记忆》 旧忆就像一扇窗，推开了就再难合上，时间回调到19年1月26日晚，这一天似乎并无大事发生，依旧像在学校的日常一样打会游戏，敲代码摸鱼，然而一条消息推送，经年未见的阿姨向我发来慰问，问我近况，并发出组团邀请的要求，很快，上车的同学越来越多，一个个陌生人ID熟悉了起来，大家互相寒暄，问了下彼此的发展情况，并约好明日聚会。合上手机的我，不禁心生期待，仿佛置身高中时代，像是一缕阳光洒在脸上的那种温暖。 一如往常，随着夏彬的问候，起身奔赴武冈，路上聊了很多，同样期待着聚会，并拉来了杂毛和光头，大家聚集在饭桌前，互相寒暄之后，挨个询问彼此的状况，遂回忆起高中时代我的种种糗事，直直让我难以自容，店内外充满了快活的语气。随后去了网吧，KTV，以及烤肉店，马子的LOL技术大有长进，夏彬却和四年前跟我在网吧通宵时别无二致，杂毛还是那个又菜又嘴臭的菜狗，光头却是熟练的让人心疼。还是以前的那个ktv,仿佛回到了高考毕业的那天晚上，无数回忆涌上心头，在一首首成名曲中，一一浮现。 在激烈的讨论以及我的抉择下，最终大家商议一起住宾馆，似乎大家虽生抗拒，却到达之后格外珍惜这最后的时光，这中好似高中的惬意生活，是我大学难以感受到的温馨，令我倍感亲切。我是多么希望相聚的日子过得再慢一些，尽管我的高中记忆已经被割裂的所剩无几，但快乐总是短暂的，一转眼就是分别，我不知道杂毛怀着什么样的心态南下广州，也不知道夏彬怎样度过大学生活，更不知道杨浩、马子在大学付出怎样的努力，只知道在这个不可逆的人生中，我已经吊车尾太长时间了，与三年前我被落下的差距更为远甚。 时间一晃眼来到四月底，以毕业照的名义，我第一次与阿姨在大学相会，像是高二结束的那个午后，阿姨依旧匆忙的打理着一切，而我又再次充当着苦力的角色帮她拿东西，似乎变得只是大环境而已，或许我得到的唯一的讯息就是马子的研究方向是AI，但终究还是有所触动，以至于我想写这篇文章纪念下过去这段时间发生的种种，我想，正如当年我所说的那样，那些过去，从未过去！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>回忆</tag>
      </tags>
  </entry>
</search>
